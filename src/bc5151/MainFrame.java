/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bc5151;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author peter
 */
public class MainFrame extends javax.swing.JFrame {

    CWDictionary dict;
    Properties prop;
    File fileName = null;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        crossWord.setGridSize(15, 15);
        prop = new Properties();
        try {
            File f = new File(getClass().getProtectionDomain().getCodeSource().getLocation().toURI());
            prop.load(new FileInputStream(f.getParent() + "/user.ini"));

        } catch (IOException | URISyntaxException ex) {
            /*if settings does not existor can't be opened, load default settings*/
            setDefaultProp();
        }
        if (prop.getProperty("dictPath") != null) {
            dict = new CWDictionary(prop.getProperty("dictPath"));
            crossWord.setDict(dict);
        }
        int delay = 1000; //milliseconds
        ActionListener taskPerformer = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                saveFile();
            }
        };
        new Timer(300000, taskPerformer).start();
    }

    private void newFile() {
        fileName = null;
    }

    private void saveFile() {
        if (fileName == null) {
            FileNameExtensionFilter filters = new FileNameExtensionFilter(
                    "Crossword file", "cwd");
            JFileChooser fcs = new JFileChooser();
            fcs.setFileFilter(filters);
            if (prop.getProperty("savePath") != null) {
                fcs.setSelectedFile(new File(prop.getProperty("savePath")));
            }
            if (fcs.showDialog(this, "Spara") == JFileChooser.APPROVE_OPTION) {
                fileName = fcs.getSelectedFile();
                if (!fileName.getName().endsWith(".cwd")) {
                    fileName = new File(fileName.getAbsolutePath() + ".cwd");
                }
                if (fileName.exists()) {
                    if (JOptionPane.showConfirmDialog(this, "Skriv över filen?",
                            "Acceptera", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                        return;
                    }
                }

                prop.setProperty("savePath", fileName.getAbsolutePath());
            }
        }
        if (fileName != null) {
            crossWord.saveToFile(fileName);
        }
    }

    private void setDefaultProp() {
        prop.setProperty("savePath", new File(".").getAbsolutePath());
    }

    private void saveProp() {
        try {
            File f = new File(getClass().getProtectionDomain().getCodeSource().getLocation().toURI());
            FileOutputStream out = new FileOutputStream(f.getParent() + "/user.ini");
            prop.store(out, null);
        } catch (URISyntaxException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stateButtonGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        dictScrollPane = new javax.swing.JScrollPane();
        dictList = new javax.swing.JList<String>();
        crossWord = new bc5151.CrossWord();
        clueScrollPane = new javax.swing.JScrollPane();
        clueTextArea = new javax.swing.JTextArea();
        clueLabel = new javax.swing.JLabel();
        mainToolBar = new javax.swing.JToolBar();
        blackButton = new javax.swing.JToggleButton();
        fillButton = new javax.swing.JToggleButton();
        clueButton = new javax.swing.JToggleButton();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenu = new javax.swing.JMenuItem();
        loadMenu = new javax.swing.JMenuItem();
        saveImageMenu = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        sizeMenu = new javax.swing.JMenuItem();
        autoFillMenu = new javax.swing.JMenuItem();
        autoTextMenu = new javax.swing.JMenuItem();
        dictMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        dictList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                dictListMouseReleased(evt);
            }
        });
        dictList.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                dictListMouseMoved(evt);
            }
        });
        dictScrollPane.setViewportView(dictList);

        crossWord.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        crossWord.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        crossWord.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                crossWordMouseMoved(evt);
            }
        });
        crossWord.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                crossWordPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout crossWordLayout = new javax.swing.GroupLayout(crossWord);
        crossWord.setLayout(crossWordLayout);
        crossWordLayout.setHorizontalGroup(
            crossWordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        crossWordLayout.setVerticalGroup(
            crossWordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        clueTextArea.setColumns(20);
        clueTextArea.setRows(3);
        clueTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                clueTextAreaKeyReleased(evt);
            }
        });
        clueScrollPane.setViewportView(clueTextArea);

        clueLabel.setBackground(new java.awt.Color(255, 255, 255));
        clueLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        clueLabel.setMaximumSize(new java.awt.Dimension(100, 10));
        clueLabel.setMinimumSize(new java.awt.Dimension(100, 10));
        clueLabel.setOpaque(true);

        mainToolBar.setFloatable(false);
        mainToolBar.setRollover(true);

        stateButtonGroup.add(blackButton);
        blackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphic/black.png"))); // NOI18N
        blackButton.setSelected(true);
        blackButton.setText("  ");
        blackButton.setToolTipText("Lägg till svarta rutor");
        blackButton.setBorder(null);
        blackButton.setFocusable(false);
        blackButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        blackButton.setIconTextGap(0);
        blackButton.setMaximumSize(new java.awt.Dimension(31, 31));
        blackButton.setMinimumSize(new java.awt.Dimension(31, 31));
        blackButton.setPreferredSize(new java.awt.Dimension(31, 31));
        blackButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/graphic/blackp.png"))); // NOI18N
        blackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonChange(evt);
            }
        });
        mainToolBar.add(blackButton);

        stateButtonGroup.add(fillButton);
        fillButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphic/fill.png"))); // NOI18N
        fillButton.setText("  ");
        fillButton.setToolTipText("Lägg till ord");
        fillButton.setBorder(null);
        fillButton.setFocusable(false);
        fillButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fillButton.setIconTextGap(0);
        fillButton.setMaximumSize(new java.awt.Dimension(31, 31));
        fillButton.setMinimumSize(new java.awt.Dimension(31, 31));
        fillButton.setPreferredSize(new java.awt.Dimension(31, 31));
        fillButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/graphic/fillp.png"))); // NOI18N
        fillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonChange(evt);
            }
        });
        mainToolBar.add(fillButton);

        stateButtonGroup.add(clueButton);
        clueButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphic/clue.png"))); // NOI18N
        clueButton.setText("  ");
        clueButton.setToolTipText("Lägg till ledtrådar");
        clueButton.setBorder(null);
        clueButton.setFocusable(false);
        clueButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clueButton.setIconTextGap(0);
        clueButton.setMaximumSize(new java.awt.Dimension(31, 31));
        clueButton.setMinimumSize(new java.awt.Dimension(31, 31));
        clueButton.setPreferredSize(new java.awt.Dimension(31, 31));
        clueButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/graphic/cluep.png"))); // NOI18N
        clueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonChange(evt);
            }
        });
        mainToolBar.add(clueButton);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(crossWord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clueLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dictScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(clueScrollPane)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(mainToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(crossWord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dictScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clueScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        fileMenu.setText("Arkiv");

        saveMenu.setText("Spara");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenu);

        loadMenu.setText("Öppna");
        loadMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenu);

        saveImageMenu.setText("Spara bild");
        saveImageMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveImageMenu);

        mainMenuBar.add(fileMenu);

        editMenu.setText("Redigera");

        sizeMenu.setText("Storlek");
        sizeMenu.setToolTipText("");
        sizeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeMenuActionPerformed(evt);
            }
        });
        editMenu.add(sizeMenu);

        autoFillMenu.setText("Fyll automatiskt");
        autoFillMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoFillMenuActionPerformed(evt);
            }
        });
        editMenu.add(autoFillMenu);

        autoTextMenu.setText("Autosquare");
        autoTextMenu.setEnabled(false);
        autoTextMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoTextMenuActionPerformed(evt);
            }
        });
        editMenu.add(autoTextMenu);

        dictMenu.setText("Ordlista");
        dictMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dictMenuActionPerformed(evt);
            }
        });
        editMenu.add(dictMenu);

        mainMenuBar.add(editMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void crossWordMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crossWordMouseMoved
        repaint();
    }//GEN-LAST:event_crossWordMouseMoved

    private void autoFillMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoFillMenuActionPerformed
        crossWord.autoFill();
    }//GEN-LAST:event_autoFillMenuActionPerformed

    private void sizeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeMenuActionPerformed
        Object[] op = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            16, 17, 18, 19, 20, 21, 22, 23, 24, 25};
        Object size = JOptionPane.showInputDialog(this, "", "Size", JOptionPane.PLAIN_MESSAGE, null, op, 15);
        if (size != null) {
            crossWord.setGridSize((int) size, (int) size);
            newFile();
        }
        repaint();
    }//GEN-LAST:event_sizeMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        saveFile();
    }//GEN-LAST:event_saveMenuActionPerformed

    private void loadMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuActionPerformed
        FileNameExtensionFilter filterl = new FileNameExtensionFilter(
                "Crossword file", "cwd");
        JFileChooser fcl = new JFileChooser();
        fcl.setFileFilter(filterl);
        fcl.setAcceptAllFileFilterUsed(false);
        if (prop.getProperty("savePath") != null) {
            fcl.setSelectedFile(new File(prop.getProperty("savePath")));
        }
        if (fcl.showDialog(this, "Öppna") == JFileChooser.APPROVE_OPTION) {
            fileName = fcl.getSelectedFile();
            crossWord.readFromFile(fileName);
            prop.setProperty("savePath", fcl.getSelectedFile().getAbsolutePath());
        }
        repaint();
    }//GEN-LAST:event_loadMenuActionPerformed

    private void crossWordPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_crossWordPropertyChange
        switch (evt.getPropertyName()) {
            case "selected":
                String w = crossWord.selectedWordString();
                clueLabel.setText("");
                clueTextArea.setText("");
                if (w != null && dict!=null) {
                    String[] l = dict.dictPart[w.length()];
                    ArrayList<String> al = new ArrayList<>();
                    for (String l1 : l) {
                        if (l1.matches("^" + w + "$")) {
                            al.add(l1);
                        }
                    }
                    String[] ll = new String[al.size()];
                    al.toArray(ll);
                    dictList.setListData(ll);
                    String s = crossWord.getWordString(crossWord.selectedWordIndex(),
                            crossWord.autoLetter);
                    dictList.setSelectedValue(s, true);
                    s = crossWord.getWordString(crossWord.selectedWordIndex(),
                            crossWord.letter);
                    if (s != null && !s.contains(".")) {
                        CWWord w1 = crossWord.selectedWord();
                        clueLabel.setText(Integer.toString(crossWord.number[w1.x][w1.y]) + (w1.horizontal ? " Horizontal: " : " Vertical: ") + s);
                        clueTextArea.setText(w1.clue);
                    }
                }
                repaint();
                break;
            default:
                break;
        }
        if (clueButton.isSelected()) {
            clueTextArea.requestFocus();
        }
    }//GEN-LAST:event_crossWordPropertyChange

    private void clueTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clueTextAreaKeyReleased
        CWWord w1 = crossWord.selectedWord();
        if (w1 != null) {
            w1.clue = clueTextArea.getText();
        }
        repaint();
    }//GEN-LAST:event_clueTextAreaKeyReleased

    private void saveImageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageMenuActionPerformed
        FileNameExtensionFilter filters = new FileNameExtensionFilter(
                "Png image", "png");
        JFileChooser fcs = new JFileChooser();
        fcs.setFileFilter(filters);
        if (fcs.showDialog(this, "Spara") == JFileChooser.APPROVE_OPTION) {
            File f = fcs.getSelectedFile();
            if (!f.getName().endsWith(".png")) {
                f = new File(f.getAbsolutePath() + ".png");
            }
            if (f.exists()) {
                if (JOptionPane.showConfirmDialog(this, "Skriv över filen?",
                        "Acceptera", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                    return;
                }
            }
            crossWord.export(f);
        }
    }//GEN-LAST:event_saveImageMenuActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveProp();
        saveFile();
    }//GEN-LAST:event_formWindowClosing

    private void dictMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dictMenuActionPerformed
        JFileChooser fcl = new JFileChooser();
        if (fcl.showDialog(this, "Öppna") == JFileChooser.APPROVE_OPTION) {
            dict = new CWDictionary(fcl.getSelectedFile().getAbsolutePath());
            crossWord.setDict(dict);
            prop.setProperty("dictPath", fcl.getSelectedFile().getAbsolutePath());
        }
        repaint();
    }//GEN-LAST:event_dictMenuActionPerformed

    private void autoTextMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoTextMenuActionPerformed
        //crossWord1.autoSquare(3, 10);
    }//GEN-LAST:event_autoTextMenuActionPerformed

    private void dictListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dictListMouseReleased
        switch (evt.getButton()) {
            case MouseEvent.BUTTON1:
                String w = crossWord.selectedWordString();
                if (w != null) {
                    crossWord.setWordString(crossWord.selectedWordIndex(),
                            dictList.getSelectedValue(), crossWord.letter);
                    repaint();
                }
                break;
            default:
                break;
        }
    }//GEN-LAST:event_dictListMouseReleased

    private void ButtonChange(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonChange
        if (blackButton.isSelected()) {
            crossWord.setState(CWState.BLACK);
        }
        if (fillButton.isSelected()) {
            crossWord.setState(CWState.EDIT);
        }
        if (clueButton.isSelected()) {
            crossWord.setState(CWState.NOEDIT);
        }
    }//GEN-LAST:event_ButtonChange

    private void dictListMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dictListMouseMoved
        dictList.requestFocus();
    }//GEN-LAST:event_dictListMouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem autoFillMenu;
    private javax.swing.JMenuItem autoTextMenu;
    private javax.swing.JToggleButton blackButton;
    private javax.swing.JToggleButton clueButton;
    private javax.swing.JLabel clueLabel;
    private javax.swing.JScrollPane clueScrollPane;
    private javax.swing.JTextArea clueTextArea;
    private bc5151.CrossWord crossWord;
    private javax.swing.JList<String> dictList;
    private javax.swing.JMenuItem dictMenu;
    private javax.swing.JScrollPane dictScrollPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JToggleButton fillButton;
    private javax.swing.JMenuItem loadMenu;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JToolBar mainToolBar;
    private javax.swing.JMenuItem saveImageMenu;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JMenuItem sizeMenu;
    private javax.swing.ButtonGroup stateButtonGroup;
    // End of variables declaration//GEN-END:variables

}
